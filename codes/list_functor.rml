let module List = fun(elem : sig type t end) -> struct(list)
  type t = sig
    val head : Unit.t -> elem.t
    val tail : Unit.t -> list.t
    val size : Int.t
    val is_empty : Bool.t
  end
  let empty : list.t = struct
    let head = fun (x : Unit.t) -> Unimplemented (* Must fail... *)
    let tail = fun (x : Unit.t) -> Unimplemented (* Must fail... *)
    let size = Int.zero
    let is_empty = Bool.true
  end
  let cons : elem.t -> list.t -> list.t =
    fun(x : elem.t, l : list.t) -> struct
      let head = fun(x' : Unit.t) -> x
      let tail = fun(l' : Unit.t) -> l
      let size = Int.succ l.size
      let is_empty = Bool.false
    end
end;;
